{"version":3,"sources":["assets/images/load.gif","components/Card.js","components/Collage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","aKey","url","title","copy","set","type","className","key","src","alt","replace","toLowerCase","searchTerms","currentPage","isSearch","loadMoreCards","apiRoot","query","Collage","React","useState","cardData","setCardData","loaded","setIsLoaded","searchQuery","setSearchQuery","useEffect","fetchCardData","count","console","log","axios","get","params","pageSize","then","response","data","cards","length","catch","error","gallery","dataLength","next","hasMore","loader","spinner","endMessage","map","card","index","name","text","imageUrl","value","placeholder","onChange","e","rawTerms","target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.74e4e74d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/load.469a66b5.gif\";","import React from \"react\";\n\nconst Card = ({ aKey, url, title, copy, set, type }) => (\n  <div className=\"card\" key={aKey} >\n    <div className=\"card__image\">\n      <img src={url} alt={title}/>\n    </div>\n    <div className=\"card__copy\">\n      <p className={`card__title ${type.replace(/\\s+/g, '-').toLowerCase()}`}>{title}</p>\n      <div className=\"card__meta\">\n        <p className=\"\">{set}</p>\n        <p className=\"\">{type}</p>\n      </div>\n      \n      {/* This should account for multiple paragraphs later */}\n      <p className=\"card__text\">{copy}</p> \n    </div>\n  </div>\n);\n\nexport default Card;\n","import spinner from '../assets/images/load.gif';\nimport React, {useState} from 'react';\nimport axios from 'axios';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Card from '../components/Card';\n\n// INIT variables/values\nlet searchTerms = '';\nlet currentPage = 1;\nlet clearResults = false;\nlet isSearch = false;\nlet loadMoreCards = true;\n\nconst apiRoot = \"https://api.elderscrollslegends.io/v1/cards\";\nlet query = apiRoot;\n\nconst Collage = () => {\n\n  const [cardData, setCardData] = React.useState([]);\n  const [loaded, setIsLoaded] = React.useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const groomSearchTerms = rawTerms => {\n    // I started with this simplegrooming, but wanted something a bit beefier to handle multiple spaces and odd characters\n    // searchTerms = rawTerms.split(' ').join(',');\n    searchTerms = rawTerms.replace(/[^a-z]+/gi, ',');\n  };\n  \n  // I wanted to debounce this; there are queries firing wayyyy too much.\n  const onChange = e => {\n    setSearchQuery(e.target.value);\n    groomSearchTerms(e.target.value);\n\n    // Set Query\n    query = `${apiRoot}?pageSize=20&page=1&name=${searchTerms}`;\n    \n    // RESET Page\n    currentPage = 1;\n\n    // RESET Cards\n    clearResults = true;\n\n    // console.log(`onChange: searchTerms: ${e.target.value} | Card Data:${cardData} | Clear Results: ${clearResults}`);\n    console.log(`onChangeQ: query: ${query}`);\n    \n    fetchCardData();\n\n    // We have to know if it's a search interaction or passive one\n    if (searchTerms.length > 0) {\n      isSearch = true;\n    } else {\n      isSearch = false;\n    }\n    console.log(`IS SEARCH: ${isSearch}`)\n  };\n\n  React.useEffect(() => {\n    fetchCardData();\n  }, []); // AHHHH, i missed the second argument and it was infinitely looping. Details :}\n\n  const fetchCardData = (count = 20) => {\n\n    query = `${apiRoot}?pageSize=${count}&page=${currentPage}&name=${searchTerms}`;\n    console.log(`QUERY(fetch): ${query}`);\n\n    axios\n      .get( query,{\n        params: {\n          pageSize: 20\n        }\n      })\n      .then(response => {\n\n        currentPage = currentPage + 1;\n\n        // Track if a search is happening\n        if (isSearch) {\n          setCardData(response.data.cards);\n          isSearch = false;\n        } else {\n          setCardData([...cardData, ...response.data.cards]);\n        }\n\n        setIsLoaded(true);\n\n        if (response.data.cards.length === 20) {\n          loadMoreCards = true;\n        } else {\n          loadMoreCards = false;\n        }\n        \n        console.log(`CARDS LOADING: ${response.data.cards.length}`);\n        console.log(`LOAD MORE?: ${loadMoreCards}`);\n      })\n      .catch(function (error) {\n        console.log(`Server ERROR: ${error}`);\n      })\n      \n  };\n\n  let gallery =\n    <InfiniteScroll\n      dataLength={cardData}\n      next={() => fetchCardData(20) } \n      hasMore={loadMoreCards}\n      loader={\n        <img\n          src={spinner}\n          alt=\"loading\"\n        />\n      }\n      endMessage={<p className=\"error\" >No more results</p>}\n    >\n      <div className=\"gallery__grid\">\n        {loaded\n          ? cardData.map((card, index) => (\n              <Card\n                key={index}\n                title={card.name}\n                copy={card.text}\n                url={card.imageUrl}\n                set={card.set.name}\n                type={card.type}\n              />\n            ))\n          : \"\"}\n      </div>\n    </InfiniteScroll>\n  ;\n\n  const renderGallery = () => {\n    console.log(`LOAD MORE?: ${loadMoreCards}`)\n    // This duplication serves to re-render the component in 2 instances\n    if (clearResults === true) {\n      return gallery;\n    } else {\n      return gallery;\n    }\n  }\n\n  return (\n    <div className=\"gallery__container\">\n\n      <label>Scroll to browse or type below to search for cards</label>\n      <input\n        type=\"text\"\n        value={searchQuery}\n        placeholder=\"ex: Guard\"\n        onChange={onChange}\n      />\n\n      {renderGallery()}\n\n    </div>\n  );\n};\n\nexport default Collage;\n","import React from 'react';\nimport './App.scss';\nimport Collage from './components/Collage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h1 className=\"header__title\">Elder Scrolls Legends ala React.js</h1>\n      </div>\n\n      <Collage />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}